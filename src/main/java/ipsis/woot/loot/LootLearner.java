package ipsis.woot.loot;

import ipsis.Woot;
import ipsis.woot.farming.ITickTracker;
import ipsis.woot.farmstructure.IFarmSetup;
import ipsis.woot.loot.schools.ILootSchool;
import ipsis.woot.util.*;
import net.minecraft.entity.EntityLiving;
import net.minecraft.util.DamageSource;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;
import net.minecraftforge.event.entity.living.LivingDropsEvent;

public class LootLearner implements ILootLearner {

    private ILootSchool lootSchool;

    public LootLearner(ILootSchool lootSchool) {

        this.lootSchool = lootSchool;
    }

    @Override
    public void tick(ITickTracker tickTracker, World world, BlockPos origin, IFarmSetup farmSetup) {

        if (!tickTracker.hasLearnTickExpired())
            return;

        lootSchool.tick(world, origin, farmSetup);

        tickTracker.resetLearnTickCount();
    }

    /**
     * Only learns when it was generated by our farm
     */
    @Override
    public void onLivingDropsEvent(LivingDropsEvent e) {

        Woot.debugSetup.trace(DebugSetup.EnumDebugType.LOOT_EVENTS, "onLivingDropsEvent", e);

        if (!(e.getEntity() instanceof EntityLiving))
            return;

        DamageSource damageSource = e.getSource();
        if (damageSource == null)
            return;

        if (!FakePlayerPool.isOurFakePlayer(damageSource.getTrueSource()))
            return;

        // Cancel our fake spawns
        e.setCanceled(true);

        WootMobName wootMobName = WootMobNameBuilder.create((EntityLiving)e.getEntity());
        if (wootMobName.isValid()) {

            EnumEnchantKey key = EnumEnchantKey.getEnchantKey(e.getLootingLevel());
            Woot.lootRepository.learn(wootMobName, key, e.getDrops(), true);

            Woot.debugSetup.trace(DebugSetup.EnumDebugType.LOOT_EVENTS, "onLivingDropsEvent", wootMobName + " " + key + " " + e.getDrops());
        } else {
            Woot.debugSetup.trace(DebugSetup.EnumDebugType.LOOT_EVENTS, "onLivingDropsEvent", "invalid mob " + e.getEntity());
        }
    }
}
